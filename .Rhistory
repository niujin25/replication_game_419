c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
custom.note = "\\item P-values (from t-distribution) are in parentheses \n\\item %stars"
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
custom.note = "P-values (from t-distribution) are in parentheses \\\ %stars"
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
custom.note = "P-values (from t-distribution) are in parentheses\\\\%stars"
)
# Download libraries
library(haven)
library(texreg)
library(dplyr)
library(ggplot2)
library(fixest)
data <- read_dta("Data/Data_Exp1234_clean_new.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake, session) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
## Linear regression models with clusered errors
# no dropping
Exp3a_no_drop <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
Exp3b_no_drop <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
# dropping session 0
Exp3a_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
Exp3b_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
# dropping session 1
Exp3a_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
Exp3b_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
# dropping session 2
Exp3a_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
Exp3b_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
# Define the model list
models <- list(Exp3a_no_drop, Exp3b_no_drop,
Exp3a_drop_0, Exp3b_drop_0,
Exp3a_drop_1, Exp3b_drop_1,
Exp3a_drop_2, Exp3b_drop_2)
# Set custom model names
model_names <- c("Exp-3a (no drop)", "Exp-3b (no drop)",
"Exp-3a (drop 0)", "Exp-3b (drop 0)",
"Exp-3a (drop 1)", "Exp-3b (drop 1)",
"Exp-3a (drop 2)", "Exp-3b (drop 2)")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
file = "Tables/Robust_Table_2_Exp_3.tex",
custom.coef.names = c("Intercept", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern x HAB",
"Shock/Loss pattern x DP"),
override.se = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
),
override.pvalues = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
)
)
# Set custom model names
model_names <- c("Experiment 1a", "Experiment 1b",
"Experiment 2a", "Experiment 2b",
"Experiment 3a", "Experiment 3b",
"Experiment 4a", "Experiment 4b")
library(haven)
library(texreg)
library(dplyr)
library(lmtest)
library(sandwich)
library(fixest)
# Read the Stata data file
data <- read_dta("Data/Data_Exp1234_clean.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
# Linear regression models with cluser errors
correct1a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct1b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct2a_model <- feols(correct100 ~ aligned + accbonus + difficult + stake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct2b_model <- feols(correct100 ~ aligned + accbonus + difficult + stake + alignedXaccbonus + alignedXdifficult + alignedXstake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct3a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct3b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct4a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
correct4b_model <- feols(correct100 ~ aligned + accbonus + difficult + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
# Define the model list
models <- list(correct1a_model, correct1b_model,
correct2a_model, correct2b_model,
correct3a_model, correct3b_model,
correct4a_model, correct4b_model)
# Set custom model names
model_names <- c("Experiment 1a", "Experiment 1b",
"Experiment 2a", "Experiment 2b",
"Experiment 3a", "Experiment 3b",
"Experiment 4a", "Experiment 4b")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
custom.note = "P-values (from t-distribution) are in parentheses\\\\%stars"
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
file = "Tables/Robust_Table_2_Exp_3.tex",
custom.coef.names = c("Intercept", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern \\times HAB",
"Shock/Loss pattern \\times DP"),
override.se = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
),
override.pvalues = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
)
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Intercept", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern \\times HAB",
"Shock/Loss pattern \\times DP", "Loss Size (LS)",
"Shock/Loss pattern \\times LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
)
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Intercept", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
)
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
)
)
# Download libraries
library(haven)
library(texreg)
library(dplyr)
library(ggplot2)
library(fixest)
data <- read_dta("Data/Data_Exp1234_clean_new.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake, session) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
## Linear regression models with clusered errors
# no dropping
Exp3a_no_drop <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
Exp3b_no_drop <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
# dropping session 0
Exp3a_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
Exp3b_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
# dropping session 1
Exp3a_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
Exp3b_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
# dropping session 2
Exp3a_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
Exp3b_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
# Define the model list
models <- list(Exp3a_no_drop, Exp3b_no_drop,
Exp3a_drop_0, Exp3b_drop_0,
Exp3a_drop_1, Exp3b_drop_1,
Exp3a_drop_2, Exp3b_drop_2)
# Set custom model names
model_names <- c("Exp 3a (no drop)", "Exp 3b (no drop)",
"Exp 3a (drop 0)", "Exp 3b (drop 0)",
"Exp 3a (drop 1)", "Exp 3b (drop 1)",
"Exp 3a (drop 2)", "Exp 3b (drop 2)")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
file = "Tables/Robust_Table_2_Exp_3.tex",
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP"),
override.se = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
),
override.pvalues = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs))
)
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
file = "Tables/Robust_Table_2_Exp_3.tex",
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP"),
override.se = list( # Replace SEs with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs-1))
),
override.pvalues = list( # Replace P-values with T-values
c(1-pt(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)), df=Exp3a_no_drop$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)), df=Exp3b_no_drop$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)), df=Exp3a_drop_0$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)), df=Exp3b_drop_0$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)), df=Exp3a_drop_1$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)), df=Exp3b_drop_1$nobs-1)),
c(1-pt(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)), df=Exp3a_drop_2$nobs-1)),
c(1-pt(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se)), df=Exp3b_drop_2$nobs-1))
)
)
library(haven)
library(texreg)
library(dplyr)
library(lmtest)
library(sandwich)
library(fixest)
# Read the Stata data file
data <- read_dta("Data/Data_Exp1234_clean.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
# Linear regression models with cluser errors
correct1a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct1b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct2a_model <- feols(correct100 ~ aligned + accbonus + difficult + stake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct2b_model <- feols(correct100 ~ aligned + accbonus + difficult + stake + alignedXaccbonus + alignedXdifficult + alignedXstake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct3a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct3b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct4a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
correct4b_model <- feols(correct100 ~ aligned + accbonus + difficult + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
# Define the model list
models <- list(correct1a_model, correct1b_model,
correct2a_model, correct2b_model,
correct3a_model, correct3b_model,
correct4a_model, correct4b_model)
# Set custom model names
model_names <- c("Experiment 1a", "Experiment 1b",
"Experiment 2a", "Experiment 2b",
"Experiment 3a", "Experiment 3b",
"Experiment 4a", "Experiment 4b")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
)
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
override.pvalues = list( # Generating t-values
c(1-pt(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pt(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
file = "Tables/Table_2.tex"
)

clear
clc
print("Hello World")
print(Hello World)
print('Hello World')
print(x)
x = [1:50];
x = (1:50)
print(x[i] for i in (0:50))
getwd()
getwd()
linear_reg <- readRDS("~/Desktop/brown/coding/assignment-7-cj-davis99/output/models/linear_reg.rds")
runif(100)
library(data.table)
theta <- as.data.table(runif(100))
theta[<1/4]
theta[<1/4,]
theta[<= 1/4,]
theta['<= 1/4']
theta[1 <= 1/4]
theta <- as.data.table(runif(100))
theta
theta[,V1 <= 1/4]
theta_trunc <- theta[theta[,V1 <= 1/4]]
theta_trunc
hist(theta)
hist(theta_trunc)
hist(as.numeric(theta_trunc))
hist(theta[,V1])
hist(theta_trunc[,V1])
library(data.table)
theta <- as.data.table(runif(1000))
theta_trunc <- theta[theta[,V1 <= 1/4]]
hist(theta[,V1])
hist(theta_trunc[,V1])
library(data.table)
theta <- as.data.table(runif(1000))
theta_trunc <- theta[theta[,V1 <= 1/4]]
hist(theta[,V1])
hist(theta_trunc[,V1])
library(data.table)
theta <- as.data.table(runif(1000))
theta_trunc <- theta[theta[,V1 <= 1/4]]
hist(theta[,V1])
hist(theta_trunc[,V1])
theta <- as.data.table(runif(10000))
library(data.table)
theta <- as.data.table(runif(10000))
theta_trunc <- theta[theta[,V1 <= 1/4]]
hist(theta[,V1])
hist(theta_trunc[,V1])
library(data.table)
theta <- as.data.table(runif(10000))
theta_trunc <- theta[theta[,V1 <= 1/4]]
hist(theta[,V1])
hist(theta_trunc[,V1])
choose(9,2)
choose(10,3)
choose(12, 7)
choose(9,2)
dbinom(3, 10, 1/2)
choose(1000,2)
dbinom(3, 10, 0.5)
dnbinom(7, 3, 0.5)
pbinom(3, 10, 0.5)
pnbinom(7, 3, 0.5)
1 - pnbinom(7,3,0.5)
library(haven)
library(texreg)
library(dplyr)
library(lmtest)
library(sandwich)
library(fixest)
# Read the Stata data file
data <- read_dta("Data/Data_Exp1234_clean.dta")
setwd("Users/cole/Desktop/Data_package/replication_game_419")
setwd("Users/cole/Desktop")
getwd()
setwd("/Users/cole/Desktop")
setwd("/Users/cole/Desktop/Data_package/replication_game_419)
")"
setwd("/Users/cole/Desktop/Data_package/replication_game_419")
library(haven)
library(texreg)
library(dplyr)
library(lmtest)
library(sandwich)
library(fixest)
# Read the Stata data file
data <- read_dta("Data/Data_Exp1234_clean.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
# Linear regression models with cluser errors
correct1a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct1b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct2a_model <- feols(correct100 ~ aligned + accbonus + difficult + stake, cluster = ~ id, data = subset(data_table2, experiment == 2))
View(correct2a_model)
View(data)
View(correct1a_model)
View(correct1b_model)
library(haven)
library(texreg)
library(dplyr)
library(lmtest)
library(sandwich)
library(fixest)
# Read the Stata data file
data <- read_dta("Data/Data_Exp1234_clean.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
# Linear regression models with cluster errors
correct1a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct1b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 1))
correct2a_model <- feols(correct100 ~ aligned + accbonus + difficult + stake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct2b_model <- feols(correct100 ~ aligned + accbonus + difficult + stake + alignedXaccbonus + alignedXdifficult + alignedXstake, cluster = ~ id, data = subset(data_table2, experiment == 2))
correct3a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct3b_model <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
correct4a_model <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
correct4b_model <- feols(correct100 ~ aligned + accbonus + difficult + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 4))
# Define the model list
models <- list(correct1a_model, correct1b_model,
correct2a_model, correct2b_model,
correct3a_model, correct3b_model,
correct4a_model, correct4b_model)
# Set custom model names
model_names <- c("Experiment 1a", "Experiment 1b",
"Experiment 2a", "Experiment 2b",
"Experiment 3a", "Experiment 3b",
"Experiment 4a", "Experiment 4b")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pnorm(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
override.pvalues = list( # Generating t-values
c(1-pnorm(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)), df=correct1a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)), df=correct1b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)), df=correct2a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)), df=correct2b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)), df=correct3a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)), df=correct3b_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)), df=correct4a_model$nobs-1)),
c(1-pnorm(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se)), df=correct4b_model$nobs-1))
),
file = "Tables/Table_2.tex"
)
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP", "Loss Size (LS)",
"Shock/Loss pattern $\\times$ LS"),
digits = 3,
override.se = list( # Generating t-stats
c(1-pnorm(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)))),
c(1-pnorm(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)))),
c(1-pnorm(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)))),
c(1-pnorm(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)))),
c(1-pnorm(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)))),
c(1-pnorm(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)))),
c(1-pnorm(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)))),
c(1-pnorm(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se))))
),
override.pvalues = list( # Generating t-values
c(1-pnorm(abs(as.numeric(correct1a_model$coefficients / correct1a_model$se)))),
c(1-pnorm(abs(as.numeric(correct1b_model$coefficients / correct1b_model$se)))),
c(1-pnorm(abs(as.numeric(correct2a_model$coefficients / correct2a_model$se)))),
c(1-pnorm(abs(as.numeric(correct2b_model$coefficients / correct2b_model$se)))),
c(1-pnorm(abs(as.numeric(correct3a_model$coefficients / correct3a_model$se)))),
c(1-pnorm(abs(as.numeric(correct3b_model$coefficients / correct3b_model$se)))),
c(1-pnorm(abs(as.numeric(correct4a_model$coefficients / correct4a_model$se)))),
c(1-pnorm(abs(as.numeric(correct4b_model$coefficients / correct4b_model$se))))
),
file = "Tables/Table_2.tex"
)
# Download libraries
library(haven)
library(texreg)
library(dplyr)
library(ggplot2)
library(fixest)
data <- read_dta("Data/Data_Exp1234_clean_new.dta")
data_table2 <- data %>%
group_by(accbonus, aligned, difficult, id, stake, session) %>%
summarise(correct100 = mean(correct100),
experiment = mean(experiment))
# Generate interactions and variable labels
data_table2 <- data_table2 %>%
mutate(alignedXaccbonus = aligned * accbonus,
alignedXstake = aligned * stake,
alignedXdifficult = aligned * difficult)
## Linear regression models with clusered errors
# no dropping
Exp3a_no_drop <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
Exp3b_no_drop <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3))
# dropping session 0
Exp3a_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
Exp3b_drop_0 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 0))
# dropping session 1
Exp3a_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
Exp3b_drop_1 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 1))
# dropping session 2
Exp3a_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
Exp3b_drop_2 <- feols(correct100 ~ aligned + accbonus + difficult + alignedXaccbonus + alignedXdifficult, cluster = ~ id, data = subset(data_table2, experiment == 3 & session != 2))
# Define the model list
models <- list(Exp3a_no_drop, Exp3b_no_drop,
Exp3a_drop_0, Exp3b_drop_0,
Exp3a_drop_1, Exp3b_drop_1,
Exp3a_drop_2, Exp3b_drop_2)
# Set custom model names
model_names <- c("Exp 3a (no drop)", "Exp 3b (no drop)",
"Exp 3a (drop 0)", "Exp 3b (drop 0)",
"Exp 3a (drop 1)", "Exp 3b (drop 1)",
"Exp 3a (drop 2)", "Exp 3b (drop 2)")
# Generate the regression table
texreg(
models,
custom.model.names = model_names,
file = "Tables/Robust_Table_2_Exp_3.tex",
custom.coef.names = c("Constant", "Shock/Loss pattern", "High accuracy bonus (HAB)",
"Difficult pattern (DP)", "Shock/Loss pattern $\\times$ HAB",
"Shock/Loss pattern $\\times$ DP"),
override.se = list( # Replace SEs with T-values
c(1-pnorm(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se))))
),
override.pvalues = list( # Replace P-values with T-values
c(1-pnorm(abs(as.numeric(Exp3a_no_drop$coefficients / Exp3a_no_drop$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_no_drop$coefficients / Exp3b_no_drop$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_0$coefficients / Exp3a_drop_0$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_0$coefficients / Exp3b_drop_0$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_1$coefficients / Exp3a_drop_1$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_1$coefficients / Exp3b_drop_1$se)))),
c(1-pnorm(abs(as.numeric(Exp3a_drop_2$coefficients / Exp3a_drop_2$se)))),
c(1-pnorm(abs(as.numeric(Exp3b_drop_2$coefficients / Exp3b_drop_2$se))))
)
)
summary(correct1a_model)
